Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> comandos
Rule 2     comandos -> <empty>
Rule 3     comandos -> comandos VARIABLE
Rule 4     comandos -> comandos WORD
Rule 5     comandos -> comandos CONST
Rule 6     comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF
Rule 7     comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR
Rule 8     alternative -> condition_sing
Rule 9     alternative -> condition_rec
Rule 10    condition_sing -> ELSE comandos
Rule 11    condition_rec -> <empty>
Rule 12    condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_rec
Rule 13    condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_sing

Terminals, with rules where they appear

CONST                : 5
ELSE                 : 10
ELSEIF               : 12 13
ENDCONDITION         : 6 7 12 13
ENDFOR               : 7
ENDIF                : 6
FOR                  : 7
IF                   : 6
VARIABLE             : 3
WORD                 : 4 6 7 12 13
error                : 

Nonterminals, with rules where they appear

alternative          : 6
comandos             : 1 3 4 5 6 6 7 7 10 12 13
condition_rec        : 9 12
condition_sing       : 8 13
prog                 : 0

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . comandos
    (2) comandos -> .
    (3) comandos -> . comandos VARIABLE
    (4) comandos -> . comandos WORD
    (5) comandos -> . comandos CONST
    (6) comandos -> . comandos IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> . comandos FOR WORD ENDCONDITION comandos ENDFOR

    VARIABLE        reduce using rule 2 (comandos -> .)
    WORD            reduce using rule 2 (comandos -> .)
    CONST           reduce using rule 2 (comandos -> .)
    IF              reduce using rule 2 (comandos -> .)
    FOR             reduce using rule 2 (comandos -> .)
    $end            reduce using rule 2 (comandos -> .)

    prog                           shift and go to state 1
    comandos                       shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> comandos .
    (3) comandos -> comandos . VARIABLE
    (4) comandos -> comandos . WORD
    (5) comandos -> comandos . CONST
    (6) comandos -> comandos . IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> comandos . FOR WORD ENDCONDITION comandos ENDFOR

    $end            reduce using rule 1 (prog -> comandos .)
    VARIABLE        shift and go to state 3
    WORD            shift and go to state 4
    CONST           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7


state 3

    (3) comandos -> comandos VARIABLE .

    VARIABLE        reduce using rule 3 (comandos -> comandos VARIABLE .)
    WORD            reduce using rule 3 (comandos -> comandos VARIABLE .)
    CONST           reduce using rule 3 (comandos -> comandos VARIABLE .)
    IF              reduce using rule 3 (comandos -> comandos VARIABLE .)
    FOR             reduce using rule 3 (comandos -> comandos VARIABLE .)
    $end            reduce using rule 3 (comandos -> comandos VARIABLE .)
    ELSE            reduce using rule 3 (comandos -> comandos VARIABLE .)
    ELSEIF          reduce using rule 3 (comandos -> comandos VARIABLE .)
    ENDIF           reduce using rule 3 (comandos -> comandos VARIABLE .)
    ENDFOR          reduce using rule 3 (comandos -> comandos VARIABLE .)


state 4

    (4) comandos -> comandos WORD .

    VARIABLE        reduce using rule 4 (comandos -> comandos WORD .)
    WORD            reduce using rule 4 (comandos -> comandos WORD .)
    CONST           reduce using rule 4 (comandos -> comandos WORD .)
    IF              reduce using rule 4 (comandos -> comandos WORD .)
    FOR             reduce using rule 4 (comandos -> comandos WORD .)
    $end            reduce using rule 4 (comandos -> comandos WORD .)
    ELSE            reduce using rule 4 (comandos -> comandos WORD .)
    ELSEIF          reduce using rule 4 (comandos -> comandos WORD .)
    ENDIF           reduce using rule 4 (comandos -> comandos WORD .)
    ENDFOR          reduce using rule 4 (comandos -> comandos WORD .)


state 5

    (5) comandos -> comandos CONST .

    VARIABLE        reduce using rule 5 (comandos -> comandos CONST .)
    WORD            reduce using rule 5 (comandos -> comandos CONST .)
    CONST           reduce using rule 5 (comandos -> comandos CONST .)
    IF              reduce using rule 5 (comandos -> comandos CONST .)
    FOR             reduce using rule 5 (comandos -> comandos CONST .)
    $end            reduce using rule 5 (comandos -> comandos CONST .)
    ELSE            reduce using rule 5 (comandos -> comandos CONST .)
    ELSEIF          reduce using rule 5 (comandos -> comandos CONST .)
    ENDIF           reduce using rule 5 (comandos -> comandos CONST .)
    ENDFOR          reduce using rule 5 (comandos -> comandos CONST .)


state 6

    (6) comandos -> comandos IF . WORD ENDCONDITION comandos alternative ENDIF

    WORD            shift and go to state 8


state 7

    (7) comandos -> comandos FOR . WORD ENDCONDITION comandos ENDFOR

    WORD            shift and go to state 9


state 8

    (6) comandos -> comandos IF WORD . ENDCONDITION comandos alternative ENDIF

    ENDCONDITION    shift and go to state 10


state 9

    (7) comandos -> comandos FOR WORD . ENDCONDITION comandos ENDFOR

    ENDCONDITION    shift and go to state 11


state 10

    (6) comandos -> comandos IF WORD ENDCONDITION . comandos alternative ENDIF
    (2) comandos -> .
    (3) comandos -> . comandos VARIABLE
    (4) comandos -> . comandos WORD
    (5) comandos -> . comandos CONST
    (6) comandos -> . comandos IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> . comandos FOR WORD ENDCONDITION comandos ENDFOR

    VARIABLE        reduce using rule 2 (comandos -> .)
    WORD            reduce using rule 2 (comandos -> .)
    CONST           reduce using rule 2 (comandos -> .)
    IF              reduce using rule 2 (comandos -> .)
    FOR             reduce using rule 2 (comandos -> .)
    ELSE            reduce using rule 2 (comandos -> .)
    ELSEIF          reduce using rule 2 (comandos -> .)
    ENDIF           reduce using rule 2 (comandos -> .)

    comandos                       shift and go to state 12

state 11

    (7) comandos -> comandos FOR WORD ENDCONDITION . comandos ENDFOR
    (2) comandos -> .
    (3) comandos -> . comandos VARIABLE
    (4) comandos -> . comandos WORD
    (5) comandos -> . comandos CONST
    (6) comandos -> . comandos IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> . comandos FOR WORD ENDCONDITION comandos ENDFOR

    ENDFOR          reduce using rule 2 (comandos -> .)
    VARIABLE        reduce using rule 2 (comandos -> .)
    WORD            reduce using rule 2 (comandos -> .)
    CONST           reduce using rule 2 (comandos -> .)
    IF              reduce using rule 2 (comandos -> .)
    FOR             reduce using rule 2 (comandos -> .)

    comandos                       shift and go to state 13

state 12

    (6) comandos -> comandos IF WORD ENDCONDITION comandos . alternative ENDIF
    (3) comandos -> comandos . VARIABLE
    (4) comandos -> comandos . WORD
    (5) comandos -> comandos . CONST
    (6) comandos -> comandos . IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> comandos . FOR WORD ENDCONDITION comandos ENDFOR
    (8) alternative -> . condition_sing
    (9) alternative -> . condition_rec
    (10) condition_sing -> . ELSE comandos
    (11) condition_rec -> .
    (12) condition_rec -> . ELSEIF WORD ENDCONDITION comandos condition_rec
    (13) condition_rec -> . ELSEIF WORD ENDCONDITION comandos condition_sing

    VARIABLE        shift and go to state 3
    WORD            shift and go to state 4
    CONST           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7
    ELSE            shift and go to state 17
    ENDIF           reduce using rule 11 (condition_rec -> .)
    ELSEIF          shift and go to state 18

    alternative                    shift and go to state 14
    condition_sing                 shift and go to state 15
    condition_rec                  shift and go to state 16

state 13

    (7) comandos -> comandos FOR WORD ENDCONDITION comandos . ENDFOR
    (3) comandos -> comandos . VARIABLE
    (4) comandos -> comandos . WORD
    (5) comandos -> comandos . CONST
    (6) comandos -> comandos . IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> comandos . FOR WORD ENDCONDITION comandos ENDFOR

    ENDFOR          shift and go to state 19
    VARIABLE        shift and go to state 3
    WORD            shift and go to state 4
    CONST           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7


state 14

    (6) comandos -> comandos IF WORD ENDCONDITION comandos alternative . ENDIF

    ENDIF           shift and go to state 20


state 15

    (8) alternative -> condition_sing .

    ENDIF           reduce using rule 8 (alternative -> condition_sing .)


state 16

    (9) alternative -> condition_rec .

    ENDIF           reduce using rule 9 (alternative -> condition_rec .)


state 17

    (10) condition_sing -> ELSE . comandos
    (2) comandos -> .
    (3) comandos -> . comandos VARIABLE
    (4) comandos -> . comandos WORD
    (5) comandos -> . comandos CONST
    (6) comandos -> . comandos IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> . comandos FOR WORD ENDCONDITION comandos ENDFOR

    VARIABLE        reduce using rule 2 (comandos -> .)
    WORD            reduce using rule 2 (comandos -> .)
    CONST           reduce using rule 2 (comandos -> .)
    IF              reduce using rule 2 (comandos -> .)
    FOR             reduce using rule 2 (comandos -> .)
    ENDIF           reduce using rule 2 (comandos -> .)

    comandos                       shift and go to state 21

state 18

    (12) condition_rec -> ELSEIF . WORD ENDCONDITION comandos condition_rec
    (13) condition_rec -> ELSEIF . WORD ENDCONDITION comandos condition_sing

    WORD            shift and go to state 22


state 19

    (7) comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .

    VARIABLE        reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    WORD            reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    CONST           reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    IF              reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    FOR             reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    $end            reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    ELSE            reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    ELSEIF          reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    ENDIF           reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)
    ENDFOR          reduce using rule 7 (comandos -> comandos FOR WORD ENDCONDITION comandos ENDFOR .)


state 20

    (6) comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .

    VARIABLE        reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    WORD            reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    CONST           reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    IF              reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    FOR             reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    $end            reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    ELSE            reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    ELSEIF          reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    ENDIF           reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)
    ENDFOR          reduce using rule 6 (comandos -> comandos IF WORD ENDCONDITION comandos alternative ENDIF .)


state 21

    (10) condition_sing -> ELSE comandos .
    (3) comandos -> comandos . VARIABLE
    (4) comandos -> comandos . WORD
    (5) comandos -> comandos . CONST
    (6) comandos -> comandos . IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> comandos . FOR WORD ENDCONDITION comandos ENDFOR

    ENDIF           reduce using rule 10 (condition_sing -> ELSE comandos .)
    VARIABLE        shift and go to state 3
    WORD            shift and go to state 4
    CONST           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7


state 22

    (12) condition_rec -> ELSEIF WORD . ENDCONDITION comandos condition_rec
    (13) condition_rec -> ELSEIF WORD . ENDCONDITION comandos condition_sing

    ENDCONDITION    shift and go to state 23


state 23

    (12) condition_rec -> ELSEIF WORD ENDCONDITION . comandos condition_rec
    (13) condition_rec -> ELSEIF WORD ENDCONDITION . comandos condition_sing
    (2) comandos -> .
    (3) comandos -> . comandos VARIABLE
    (4) comandos -> . comandos WORD
    (5) comandos -> . comandos CONST
    (6) comandos -> . comandos IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> . comandos FOR WORD ENDCONDITION comandos ENDFOR

    VARIABLE        reduce using rule 2 (comandos -> .)
    WORD            reduce using rule 2 (comandos -> .)
    CONST           reduce using rule 2 (comandos -> .)
    IF              reduce using rule 2 (comandos -> .)
    FOR             reduce using rule 2 (comandos -> .)
    ELSEIF          reduce using rule 2 (comandos -> .)
    ELSE            reduce using rule 2 (comandos -> .)
    ENDIF           reduce using rule 2 (comandos -> .)

    comandos                       shift and go to state 24

state 24

    (12) condition_rec -> ELSEIF WORD ENDCONDITION comandos . condition_rec
    (13) condition_rec -> ELSEIF WORD ENDCONDITION comandos . condition_sing
    (3) comandos -> comandos . VARIABLE
    (4) comandos -> comandos . WORD
    (5) comandos -> comandos . CONST
    (6) comandos -> comandos . IF WORD ENDCONDITION comandos alternative ENDIF
    (7) comandos -> comandos . FOR WORD ENDCONDITION comandos ENDFOR
    (11) condition_rec -> .
    (12) condition_rec -> . ELSEIF WORD ENDCONDITION comandos condition_rec
    (13) condition_rec -> . ELSEIF WORD ENDCONDITION comandos condition_sing
    (10) condition_sing -> . ELSE comandos

    VARIABLE        shift and go to state 3
    WORD            shift and go to state 4
    CONST           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7
    ENDIF           reduce using rule 11 (condition_rec -> .)
    ELSEIF          shift and go to state 18
    ELSE            shift and go to state 17

    condition_rec                  shift and go to state 25
    condition_sing                 shift and go to state 26

state 25

    (12) condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_rec .

    ENDIF           reduce using rule 12 (condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_rec .)


state 26

    (13) condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_sing .

    ENDIF           reduce using rule 13 (condition_rec -> ELSEIF WORD ENDCONDITION comandos condition_sing .)

