
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CONST ELSE ELSEIF ENDFOR ENDIF FOR IF VAR\n    prog : comandos\n\n    comandos : \n             | terminator comandos\n             | IF '(' VAR ')' '$' content condition ENDIF \n             | FOR '(' VAR ')' '$' content condition ENDFOR \n\n    condition : condition_sing\n              | condition_rec\n\n\n    condition_sing : ELSE comandos\n\n    condition_rec :\n                  | ELSEIF '('  VAR  ')' '$'  comandos condition_rec\n\n    content :\n            | terminator content\n\n    terminator : '$' VAR '$' \n                | CONST\n      "
    
_lr_action_items = {'$end':([0,1,2,3,7,8,13,29,32,],[-2,0,-1,-2,-14,-3,-13,-4,-5,]),'IF':([0,3,7,13,25,35,],[4,4,-14,-13,4,4,]),'FOR':([0,3,7,13,25,35,],[6,6,-14,-13,6,6,]),'$':([0,3,7,10,13,15,16,17,18,20,25,34,35,],[5,5,-14,13,-13,17,18,5,5,5,5,35,5,]),'CONST':([0,3,7,13,17,18,20,25,35,],[7,7,-14,-13,7,7,7,7,7,]),'ENDIF':([3,7,8,13,17,19,20,22,23,24,25,27,29,30,32,35,36,37,],[-2,-14,-3,-13,-11,-9,-11,29,-6,-7,-2,-12,-4,-8,-5,-2,-9,-10,]),'ENDFOR':([3,7,8,13,18,20,21,23,24,25,27,28,29,30,32,35,36,37,],[-2,-14,-3,-13,-11,-11,-9,-6,-7,-2,-12,32,-4,-8,-5,-2,-9,-10,]),'ELSEIF':([3,7,8,13,17,18,19,20,21,27,29,32,35,36,],[-2,-14,-3,-13,-11,-11,26,-11,26,-12,-4,-5,-2,26,]),'(':([4,6,26,],[9,11,31,]),'VAR':([5,9,11,31,],[10,12,14,33,]),'ELSE':([7,13,17,18,19,20,21,27,],[-14,-13,-11,-11,25,-11,25,-12,]),')':([12,14,33,],[15,16,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'comandos':([0,3,25,35,],[2,8,30,36,]),'terminator':([0,3,17,18,20,25,35,],[3,3,20,20,20,3,3,]),'content':([17,18,20,],[19,21,27,]),'condition':([19,21,],[22,28,]),'condition_sing':([19,21,],[23,23,]),'condition_rec':([19,21,36,],[24,24,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> comandos','prog',1,'p_grammar','main.py',158),
  ('comandos -> <empty>','comandos',0,'p_grammar','main.py',160),
  ('comandos -> terminator comandos','comandos',2,'p_grammar','main.py',161),
  ('comandos -> IF ( VAR ) $ content condition ENDIF','comandos',8,'p_grammar','main.py',162),
  ('comandos -> FOR ( VAR ) $ content condition ENDFOR','comandos',8,'p_grammar','main.py',163),
  ('condition -> condition_sing','condition',1,'p_grammar','main.py',165),
  ('condition -> condition_rec','condition',1,'p_grammar','main.py',166),
  ('condition_sing -> ELSE comandos','condition_sing',2,'p_grammar','main.py',169),
  ('condition_rec -> <empty>','condition_rec',0,'p_grammar','main.py',171),
  ('condition_rec -> ELSEIF ( VAR ) $ comandos condition_rec','condition_rec',7,'p_grammar','main.py',172),
  ('content -> <empty>','content',0,'p_grammar','main.py',174),
  ('content -> terminator content','content',2,'p_grammar','main.py',175),
  ('terminator -> $ VAR $','terminator',3,'p_grammar','main.py',177),
  ('terminator -> CONST','terminator',1,'p_grammar','main.py',178),
]
