
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CONST ELSE ELSEIF ENDFOR ENDIF FOR IF VAR\n    prog : comandos\n\n    comandos : \n            | CONST comandos\n            | '$' VAR '$' comandos\n            | IF VAR ')' '$' comandos alternative ENDIF comandos\n            | FOR VAR ')' '$' comandos ENDFOR comandos\n\n    alternative :\n            | condition_sing\n            | condition_rec\n\n    condition_sing : ELSE comandos\n\n    condition_rec :\n                  | ELSEIF VAR  ')' '$'  comandos condition_rec\n           \n    \n               \n      "
    
_lr_action_items = {'$end':([0,1,2,3,7,11,14,24,25,28,29,],[-2,0,-1,-2,-3,-2,-4,-2,-2,-6,-5,]),'CONST':([0,3,11,15,16,22,24,25,31,],[3,3,3,3,3,3,3,3,3,]),'$':([0,3,8,11,12,13,15,16,22,24,25,30,31,],[4,4,11,4,15,16,4,4,4,4,4,31,4,]),'IF':([0,3,11,15,16,22,24,25,31,],[5,5,5,5,5,5,5,5,5,]),'FOR':([0,3,11,15,16,22,24,25,31,],[6,6,6,6,6,6,6,6,6,]),'ELSE':([3,7,11,14,15,17,24,25,28,29,],[-2,-3,-2,-4,-2,22,-2,-2,-6,-5,]),'ELSEIF':([3,7,11,14,15,17,24,25,28,29,31,32,],[-2,-3,-2,-4,-2,23,-2,-2,-6,-5,-2,23,]),'ENDIF':([3,7,11,14,15,17,19,20,21,22,24,25,26,28,29,31,32,33,],[-2,-3,-2,-4,-2,-7,25,-8,-9,-2,-2,-2,-10,-6,-5,-2,-11,-12,]),'ENDFOR':([3,7,11,14,16,18,24,25,28,29,],[-2,-3,-2,-4,-2,24,-2,-2,-6,-5,]),'VAR':([4,5,6,23,],[8,9,10,27,]),')':([9,10,27,],[12,13,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'comandos':([0,3,11,15,16,22,24,25,31,],[2,7,14,17,18,26,28,29,32,]),'alternative':([17,],[19,]),'condition_sing':([17,],[20,]),'condition_rec':([17,32,],[21,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> comandos','prog',1,'p_grammar','main.py',158),
  ('comandos -> <empty>','comandos',0,'p_grammar','main.py',160),
  ('comandos -> CONST comandos','comandos',2,'p_grammar','main.py',161),
  ('comandos -> $ VAR $ comandos','comandos',4,'p_grammar','main.py',162),
  ('comandos -> IF VAR ) $ comandos alternative ENDIF comandos','comandos',8,'p_grammar','main.py',163),
  ('comandos -> FOR VAR ) $ comandos ENDFOR comandos','comandos',7,'p_grammar','main.py',164),
  ('alternative -> <empty>','alternative',0,'p_grammar','main.py',166),
  ('alternative -> condition_sing','alternative',1,'p_grammar','main.py',167),
  ('alternative -> condition_rec','alternative',1,'p_grammar','main.py',168),
  ('condition_sing -> ELSE comandos','condition_sing',2,'p_grammar','main.py',170),
  ('condition_rec -> <empty>','condition_rec',0,'p_grammar','main.py',172),
  ('condition_rec -> ELSEIF VAR ) $ comandos condition_rec','condition_rec',6,'p_grammar','main.py',173),
]
